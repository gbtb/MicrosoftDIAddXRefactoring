# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build-and-test:
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # Be sure to update the tag on this image to a more stable version, using latest can result in unstable builds.
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:6.0
    steps:
      # Checkout the code as the first step.
      - checkout
      - run:
          # Update this line with the directory that contains your tests project file
          working_directory: .
          name: Install paket
          command: |
            dotnet tool restore
      - run:
          # Update this line with the directory that contains your tests project file
          working_directory: .
          name: Restore packages
          command: |
            dotnet paket restore
      - run:
          # Update this line with the directory that contains your tests project file
          working_directory: tests/AddXRefactoringTests
          name: Run tests
          command: |
            dotnet test -verbosity:diagnostic --diag:log.txt
      - run:
          working_directory: src/MicrosoftDI.AddXRefactoring.Package
          name: Pack roslyn code-refactoring
          command: |
            dotnet build -c release
      - run:
          working_directory: src/MicrosoftDI.AddXRefactoring.Attributes
          name: Pack roslyn code-refactoring
          command: |
            dotnet pack -c release
      - store_artifacts:
          path: src/nupkg
          destination: nuget_package
      - persist_to_workspace:
          root: src
          paths:
            - nupkg

  publish-to-nuget:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:6.0
    steps:
      - attach_workspace:
          at: .
      - run:
          dotnet nuget push --source "${NUGET_FEED_URL}" --api-key="${NUGET_KEY}" nupkg/*.nupkg


workflows:
  # Below is the definition of your workflow.
  # Inside the workflow, you provide the jobs you want to run, e.g this workflow runs the build-and-test job above.
  # CircleCI will run this workflow on every commit.
  # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
  build-and-publish:
    jobs:
      - build-and-test
      - publish-to-nuget:
          filters:
            branches:
              only: master
          requires:
            - build-and-test
          context: "Main context"
